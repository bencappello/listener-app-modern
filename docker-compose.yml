version: '3.8'

services:
  # Backend FastAPI service
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - listener-network
    environment:
      - APP_ENV=development

  # Frontend React service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    networks:
      - listener-network
    environment:
      - NODE_ENV=development

  # Blog scraper service
  scraper:
    build:
      context: .
      dockerfile: docker/scraper/Dockerfile
    volumes:
      - ./scraper:/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - listener-network
    environment:
      - APP_ENV=development

  # PostgreSQL database
  postgres:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - listener-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - listener-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  listener-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 